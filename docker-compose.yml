version: '3.9'

services:
  nginx:
    image: nginx:alpine
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./certs:/etc/nginx/certs
      - ./logs:/var/log/nginx
    depends_on:
      - backend-service
      - web-client
      - image-recognition-service
    networks:
      - shared-network

  backend-service:
    build: ./packages/bw-backend-service
    container_name: backend-service
    restart: always
    depends_on:
      - database
      - image-recognition-service
    env_file: .env
    environment:
      PORT: $BE_SERVICE_PORT
      PG_HOST: database
      PG_PORT: 5432
      PG_USER: $PG_USER
      PG_PASS: $PG_PASS
      PG_DB: $PG_DB
      JWT_SECRET: $JWT_SECRET
      IMAGE_RECOGNITION_URL: http://image-recognition-service:5000
    ports:
      - ${BE_SERVICE_PORT}:${BE_SERVICE_PORT}
    volumes:
      - ./packages/bw-backend-service:/usr/app/
      - /usr/app/node_modules
    networks:
      - shared-network
    command: /usr/app/node_modules/.bin/nodemon -L --exec ts-node ./src/index.ts

  web-client:
    build: ./packages/bw-web-client
    container_name: web-client
    restart: always
    env_file: .env
    environment:
      PORT: $WEB_CLIENT_PORT
    ports:
      - ${WEB_CLIENT_PORT}:${WEB_CLIENT_PORT}
    volumes:
      - ./packages/bw-web-client:/usr/app/
      - /usr/app/node_modules
    networks:
      - shared-network
    command: npm run dev

  image-recognition-service:
    image: python:3.9-alpine
    container_name: image-recognition-service
    restart: always
    volumes:
      - ./image-recognition:/app
    working_dir: /app
    command: python app.py
    networks:
      - shared-network

  database:
    image: postgres:13-alpine
    container_name: postgres-database
    restart: always
    env_file: .env
    environment:
      POSTGRES_USER: $PG_USER
      POSTGRES_PASSWORD: $PG_PASS
      POSTGRES_DB: $PG_DB
    ports:
      - "5432:5432"
    volumes:
      - dbdata:/var/lib/postgresql/data
    networks:
      - shared-network

volumes:
  dbdata:

networks:
  shared-network:
    driver: bridge
